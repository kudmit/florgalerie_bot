package main

import (
	"log"
	"regexp"
	"strconv"
	"time"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

// –õ–æ–∫–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –±—É–∫–µ—Ç–∞
func sendBouquetSavedMessage(bot *tgbotapi.BotAPI, chatID int64, lang string, details string) {
	var message string
	switch lang {
	case "DEU":
		message = "Ihr Strau√ü wurde gespeichert: " + details
	case "EN":
		message = "Your bouquet has been saved: " + details
	case "UK":
		message = "–í–∞—à –±—É–∫–µ—Ç –∑–±–µ—Ä–µ–∂–µ–Ω–æ: " + details
	case "RU":
		message = "–í–∞—à –±—É–∫–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: " + details
	}
	msg := tgbotapi.NewMessage(chatID, message)
	bot.Send(msg)
}

// –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
func sendGreeting(bot *tgbotapi.BotAPI, chatID int64, lang string) {
	var greeting, nextButton string
	switch lang {
	case "DEU":
		greeting = "Willkommen in unserem Gesch√§ft üíêFlorgalerie!"
		nextButton = "Weiter!"
	case "EN":
		greeting = "Welcome to our store üíêFlorgalerie!"
		nextButton = "Next!"
	case "UK":
		greeting = "–õ–∞—Å–∫–∞–≤–æ –ø—Ä–æ—Å–∏–º–æ –¥–æ –Ω–∞—à–æ–≥–æ –º–∞–≥–∞–∑–∏–Ω—É üíêFlorgalerie!"
		nextButton = "–î–∞–ª—ñ!"
	case "RU":
		greeting = "–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º –í–∞—Å –≤ –Ω–∞—à–µ–º –º–∞–≥–∞–∑–∏–Ω–µ üíêFlorgalerie!"
		nextButton = "–î–∞–ª–µ–µ!"
	}

	buttons := tgbotapi.NewReplyKeyboard(
		tgbotapi.NewKeyboardButtonRow(
			tgbotapi.NewKeyboardButton(nextButton),
		),
	)
	msg := tgbotapi.NewMessage(chatID, greeting)
	msg.ReplyMarkup = buttons
	bot.Send(msg)
}

// –í–æ–ø—Ä–æ—Å –æ –±—É–∫–µ—Ç–µ –∏–ª–∏ —Å–æ–∑–¥–∞–Ω–∏–∏
func sendQuestion(bot *tgbotapi.BotAPI, chatID int64, lang string) {
	var question, button1, button2 string
	switch lang {
	case "DEU":
		question = "M√∂chten Sie einen Blumenstrau√ü ausw√§hlen oder Ihren eigenen zusammenstellen?"
		button1 = "Ausw√§hlen!"
		button2 = "Mein eigener Strau√ü!"
	case "EN":
		question = "Would you like to choose a bouquet or create your own?"
		button1 = "Choose!"
		button2 = "Create my own!"
	case "UK":
		question = "–•–æ—Ç—ñ–ª–∏ –± –≤–∏ –≤–∏–±—Ä–∞—Ç–∏ –±—É–∫–µ—Ç –∞–±–æ —Å—Ç–≤–æ—Ä–∏—Ç–∏ –≤–ª–∞—Å–Ω–∏–π?"
		button1 = "–í–∏–±—Ä–∞—Ç–∏!"
		button2 = "–°—Ç–≤–æ—Ä–∏—Ç–∏ —Å–≤—ñ–π!"
	case "RU":
		question = "–í—ã —Ö–æ—Ç–∏—Ç–µ –≤—ã–±—Ä–∞—Ç—å –±—É–∫–µ—Ç –∏–ª–∏ —Å–æ–∑–¥–∞—Ç—å —Å–≤–æ–π —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π?"
		button1 = "–í—ã–±—Ä–∞—Ç—å!"
		button2 = "–°–æ–∑–¥–∞—Ç—å —Å–≤–æ–π!"
	}

	buttons := tgbotapi.NewReplyKeyboard(
		tgbotapi.NewKeyboardButtonRow(
			tgbotapi.NewKeyboardButton(button1),
			tgbotapi.NewKeyboardButton(button2),
		),
	)
	msg := tgbotapi.NewMessage(chatID, question)
	msg.ReplyMarkup = buttons
	bot.Send(msg)
}

// –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –≤—ã–±–æ—Ä–∞ –±—É–∫–µ—Ç–∞
func sendBouquetChoiceMessage(bot *tgbotapi.BotAPI, chatID int64, lang string) {
	var message string
	switch lang {
	case "DEU":
		message = "Bitte w√§hlen Sie einen Blumenstrau√ü aus unserem Telegram-Kanal aus (z. B.: #123)."
	case "EN":
		message = "Please choose a bouquet from our Telegram channel (e.g., #123)."
	case "UK":
		message = "–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–∏–±–µ—Ä—ñ—Ç—å –±—É–∫–µ—Ç –∑ –Ω–∞—à–æ–≥–æ Telegram-–∫–∞–Ω–∞–ª—É (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥: #123)."
	case "RU":
		message = "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –±—É–∫–µ—Ç –∏–∑ –Ω–∞—à–µ–≥–æ Telegram-–∫–∞–Ω–∞–ª–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: #123)."
	}
	msg := tgbotapi.NewMessage(chatID, message)
	bot.Send(msg)
}

// –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Å–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –±—É–∫–µ—Ç–∞
func sendCustomBouquetMessage(bot *tgbotapi.BotAPI, chatID int64, lang string) {
	var message string
	switch lang {
	case "DEU":
		message = "Bitte beschreiben Sie die Zusammensetzung Ihres Strau√ües - Namen der Blumen und ihre Anzahl."
	case "EN":
		message = "Please describe the composition of your bouquet - flower names and their quantities."
	case "UK":
		message = "–ë—É–¥—å –ª–∞—Å–∫–∞, –æ–ø–∏—à—ñ—Ç—å —Å–∫–ª–∞–¥ –≤–∞—à–æ–≥–æ –±—É–∫–µ—Ç–∞ - –Ω–∞–∑–≤–∏ –∫–≤—ñ—Ç—ñ–≤ —Ç–∞ —ó—Ö –∫—ñ–ª—å–∫—ñ—Å—Ç—å."
	case "RU":
		message = "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–∏—à–∏—Ç–µ —Å–æ—Å—Ç–∞–≤ –±—É–∫–µ—Ç–∞ ‚Äî –Ω–∞–∑–≤–∞–Ω–∏—è —Ü–≤–µ—Ç–æ–≤ –∏ –∏—Ö –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ."
	}
	msg := tgbotapi.NewMessage(chatID, message)
	bot.Send(msg)
}

// –°–ª—É—á–∞–π –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –±—É–∫–µ—Ç–æ–≤
func sendSingleOrMultipleQuestion(bot *tgbotapi.BotAPI, chatID int64, lang string) {
	var question, singleButton, multipleButton string
	switch lang {
	case "DEU":
		question = "M√∂chten Sie einen oder mehrere Str√§u√üe bestellen?"
		singleButton = "Nur einen"
		multipleButton = "Mehrere Str√§u√üe"
	case "EN":
		question = "Would you like to order one or multiple bouquets?"
		singleButton = "Just one"
		multipleButton = "Multiple bouquets"
	case "UK":
		question = "–•–æ—Ç—ñ–ª–∏ –± –≤–∏ –∑–∞–º–æ–≤–∏—Ç–∏ –æ–¥–∏–Ω —á–∏ –∫—ñ–ª—å–∫–∞ –±—É–∫–µ—Ç—ñ–≤?"
		singleButton = "–¢—ñ–ª—å–∫–∏ –æ–¥–∏–Ω"
		multipleButton = "–ö—ñ–ª—å–∫–∞ –±—É–∫–µ—Ç—ñ–≤"
	case "RU":
		question = "–•–æ—Ç–µ–ª–∏ –±—ã –≤—ã –∑–∞–∫–∞–∑–∞—Ç—å –æ–¥–∏–Ω –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –±—É–∫–µ—Ç–æ–≤?"
		singleButton = "–¢–æ–ª—å–∫–æ –æ–¥–∏–Ω"
		multipleButton = "–ù–µ—Å–∫–æ–ª—å–∫–æ –±—É–∫–µ—Ç–æ–≤"
	}

	buttons := tgbotapi.NewReplyKeyboard(
		tgbotapi.NewKeyboardButtonRow(
			tgbotapi.NewKeyboardButton(singleButton),
			tgbotapi.NewKeyboardButton(multipleButton),
		),
	)
	msg := tgbotapi.NewMessage(chatID, question)
	msg.ReplyMarkup = buttons
	bot.Send(msg)
}
func sendPackagingQuestion(bot *tgbotapi.BotAPI, chatID int64, lang string) {
	var question, craftPaper, coloredWrap, noWrap string
	switch lang {
	case "DEU":
		question = "Bitte w√§hlen Sie eine Verpackung:"
		craftPaper = "Kraftpapier"
		coloredWrap = "Bunte Verpackung"
		noWrap = "Ohne Verpackung"
	case "EN":
		question = "Please choose a packaging:"
		craftPaper = "Craft paper"
		coloredWrap = "Colored wrap"
		noWrap = "No packaging"
	case "UK":
		question = "–û–±–µ—Ä—ñ—Ç—å, –±—É–¥—å –ª–∞—Å–∫–∞, —É–ø–∞–∫–æ–≤–∫—É:"
		craftPaper = "–ö—Ä–∞—Ñ—Ç–æ–≤–∏–π –ø–∞–ø—ñ—Ä"
		coloredWrap = "–ö–æ–ª—å–æ—Ä–æ–≤–∞ —É–ø–∞–∫–æ–≤–∫–∞"
		noWrap = "–£–ø–∞–∫–æ–≤–∫–∞ –Ω–µ –ø–æ—Ç—Äi–±–Ω–∞"
	case "RU":
		question = "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ —É–ø–∞–∫–æ–≤–∫—É:"
		craftPaper = "–ö—Ä–∞—Ñ—Ç–æ–≤–∞—è –±—É–º–∞–≥–∞"
		coloredWrap = "–¶–≤–µ—Ç–Ω–∞—è —É–ø–∞–∫–æ–≤–∫–∞"
		noWrap = "–ë–µ–∑ —É–ø–∞–∫–æ–≤–∫–∏"
	}

	buttons := tgbotapi.NewReplyKeyboard(
		tgbotapi.NewKeyboardButtonRow(
			tgbotapi.NewKeyboardButton(craftPaper),
			tgbotapi.NewKeyboardButton(coloredWrap),
			tgbotapi.NewKeyboardButton(noWrap),
		),
	)
	msg := tgbotapi.NewMessage(chatID, question)
	msg.ReplyMarkup = buttons
	bot.Send(msg)
}

// –ó–∞–ø—Ä–æ—Å –≤—Ä–µ–º–µ–Ω–∏
func sendOrderTimeRequest(bot *tgbotapi.BotAPI, chatID int64, lang string) {
	var message string
	switch lang {
	case "DEU":
		message = "Bitte geben Sie Datum und Uhrzeit ein, zu der Ihre Bestellung fertig sein soll (z. B. 2023-12-31 15:30)."
	case "EN":
		message = "Please enter the date and time by which your order should be ready (e.g., 2023-12-31 15:30)."
	case "UK":
		message = "–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –¥–∞—Ç—É —Ç–∞ —á–∞—Å, –¥–æ —è–∫–æ–≥–æ –≤–∞—à–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –º–∞—î –±—É—Ç–∏ –≥–æ—Ç–æ–≤–µ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥: 2023-12-31 15:30)."
	case "RU":
		message = "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è —Å—Ä–æ–∫–∞, –∫ –∫–æ—Ç–æ—Ä–æ–º—É –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≥–æ—Ç–æ–≤ –í–∞—à –∑–∞–∫–∞–∑ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 2023-12-31 15:30)."
	}
	msg := tgbotapi.NewMessage(chatID, message)
	bot.Send(msg)
}
func sendStoreClosedOptions(bot *tgbotapi.BotAPI, chatID int64, lang string, nextDay time.Time) {
	var message, returnButton, nextDayButton string
	switch lang {
	case "DEU":
		message = "Leider ist das Gesch√§ft zu dieser Zeit geschlossen. Sie k√∂nnen Ihre Bestellung um " + nextDay.Format("2006-01-02 08:00") + " abholen oder eine andere Zeit eingeben."
		returnButton = "Zur√ºck zur Zeitauswahl"
		nextDayButton = "M√∂glichst fr√ºh morgen abholen"
	case "EN":
		message = "The store is closed at this time. You can pick up your order at " + nextDay.Format("2006-01-02 08:00") + " or enter a new time."
		returnButton = "Return to time selection"
		nextDayButton = "Get as soon as possible tomorrow"
	case "UK":
		message = "–ú–∞–≥–∞–∑–∏–Ω –∑–∞–∫—Ä–∏—Ç–∏–π —É —Ü–µ–π —á–∞—Å. –í–∏ –º–æ–∂–µ—Ç–µ –∑–∞–±—Ä–∞—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –æ " + nextDay.Format("2006-01-02 08:00") + " –∞–±–æ –≤–≤–µ—Å—Ç–∏ —ñ–Ω—à–∏–π —á–∞—Å."
		returnButton = "–ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –¥–æ –≤–∏–±–æ—Ä—É —á–∞—Å—É"
		nextDayButton = "–ó–∞–±—Ä–∞—Ç–∏ —è–∫–Ω–∞–π—à–≤–∏–¥—à–µ –∑–∞–≤—Ç—Ä–∞"
	case "RU":
		message = "–ú–∞–≥–∞–∑–∏–Ω –∑–∞–∫—Ä—ã—Ç –≤ —ç—Ç–æ –≤—Ä–µ–º—è. –í—ã –º–æ–∂–µ—Ç–µ –∑–∞–±—Ä–∞—Ç—å –∑–∞–∫–∞–∑ –≤ " + nextDay.Format("2006-01-02 08:00") + " –∏–ª–∏ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–µ –≤—Ä–µ–º—è."
		returnButton = "–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –≤—ã–±–æ—Ä—É –≤—Ä–µ–º–µ–Ω–∏"
		nextDayButton = "–ü–æ–ª—É—á–∏—Ç—å –∫–∞–∫ –º–æ–∂–Ω–æ —Å–∫–æ—Ä–µ–µ –∑–∞–≤—Ç—Ä–∞"
	}

	buttons := tgbotapi.NewReplyKeyboard(
		tgbotapi.NewKeyboardButtonRow(
			tgbotapi.NewKeyboardButton(returnButton),
			tgbotapi.NewKeyboardButton(nextDayButton),
		),
	)
	msg := tgbotapi.NewMessage(chatID, message)
	msg.ReplyMarkup = buttons
	bot.Send(msg)
}

// –õ–æ–≥–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—Ä–µ–º–µ–Ω–∏
func handleOrderTime(bot *tgbotapi.BotAPI, chatID int64, input string, lang string, userData map[int64]map[string]string) {
	loc, _ := time.LoadLocation("Europe/Vienna")
	currentTime := time.Now().In(loc)

	parsedTime, err := time.ParseInLocation("2006-01-02 15:04", input, loc)
	if err != nil {
		sendInvalidTimeMessage(bot, chatID, lang)
		return
	}

	if parsedTime.Before(currentTime) {
		sendInvalidTimeMessage(bot, chatID, lang)
		return
	}

	if !isWithinWorkingHours(parsedTime) {
		// –ï—Å–ª–∏ –º–∞–≥–∞–∑–∏–Ω –∑–∞–∫—Ä—ã—Ç, –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –≤–∞—Ä–∏–∞–Ω—Ç—ã
		nextDay := time.Date(parsedTime.Year(), parsedTime.Month(), parsedTime.Day()+1, 8, 0, 0, 0, loc)
		sendStoreClosedOptions(bot, chatID, lang, nextDay)
		return
	}

	// –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –≤—Ä–µ–º—è
	userData[chatID]["time"] = parsedTime.Format("2006-01-02 15:04")
	sendOrderTimeSavedMessage(bot, chatID, lang)
}

// –°–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
func sendInvalidTimeMessage(bot *tgbotapi.BotAPI, chatID int64, lang string) {
	var message string
	switch lang {
	case "DEU":
		message = "Ung√ºltige Eingabezeit."
	case "EN":
		message = "Invalid time input."
	case "UK":
		message = "–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π —á–∞—Å."
	case "RU":
		message = "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥ –≤—Ä–µ–º–µ–Ω–∏."
	}
	msg := tgbotapi.NewMessage(chatID, message)
	bot.Send(msg)
}

// –°–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–∫—Ä—ã—Ç–æ–º –º–∞–≥–∞–∑–∏–Ω–µ
func sendClosedMessage(bot *tgbotapi.BotAPI, chatID int64, lang string) {
	var message string
	switch lang {
	case "DEU":
		message = "Leider ist das Gesch√§ft zu dieser Zeit geschlossen. Bitte w√§hlen Sie eine Zeit w√§hrend der √ñffnungszeiten."
	case "EN":
		message = "The store is closed at that time. Please choose a time during business hours."
	case "UK":
		message = "–ú–∞–≥–∞–∑–∏–Ω –∑–∞—á–∏–Ω–µ–Ω–∏–π —É —Ü–µ–π —á–∞—Å. –ë—É–¥—å –ª–∞—Å–∫–∞, –æ–±–µ—Ä—ñ—Ç—å —á–∞—Å —É –º–µ–∂–∞—Ö —Ä–æ–±–æ—á–∏—Ö –≥–æ–¥–∏–Ω."
	case "RU":
		message = "–ú–∞–≥–∞–∑–∏–Ω –∑–∞–∫—Ä—ã—Ç –≤ —ç—Ç–æ –≤—Ä–µ–º—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ä–∞–º–∫–∞—Ö —Ä–∞–±–æ—á–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏."
	}
	msg := tgbotapi.NewMessage(chatID, message)
	bot.Send(msg)
}

// –°–æ–æ–±—â–µ–Ω–∏–µ –æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≤—Ä–µ–º–µ–Ω–∏
func sendOrderTimeSavedMessage(bot *tgbotapi.BotAPI, chatID int64, lang string) {
	var message string
	switch lang {
	case "DEU":
		message = "Ihre Bestellzeit wurde gespeichert."
	case "EN":
		message = "Your order time has been saved."
	case "UK":
		message = "–ß–∞—Å –≤–∞—à–æ–≥–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –∑–±–µ—Ä–µ–∂–µ–Ω–æ."
	case "RU":
		message = "–í—Ä–µ–º—è –≤–∞—à–µ–≥–æ –∑–∞–∫–∞–∑–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ."
	}
	msg := tgbotapi.NewMessage(chatID, message)
	bot.Send(msg)
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—á–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
func isWithinWorkingHours(t time.Time) bool {
	weekday := t.Weekday()
	hour := t.Hour()

	if weekday >= time.Monday && weekday <= time.Friday {
		return hour >= 9 && hour <= 21
	}

	if weekday == time.Saturday || weekday == time.Sunday {
		return hour >= 9 && hour <= 15
	}

	return false
}
func sendOrderConfirmation(bot *tgbotapi.BotAPI, chatID int64, lang string, userData map[int64]map[string]string) {
	order := userData[chatID]

	// –õ–æ–∫–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ —Ç–µ–∫—Å—Ç—ã –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è
	var confirmationMessage, nextButton string
	switch lang {
	case "DEU":
		confirmationMessage = "Bitte best√§tigen Sie Ihre Bestellung:\n"
		nextButton = "Weiter!"
	case "EN":
		confirmationMessage = "Please confirm your order:\n"
		nextButton = "Next!"
	case "UK":
		confirmationMessage = "–ë—É–¥—å –ª–∞—Å–∫–∞, –ø—ñ–¥—Ç–≤–µ—Ä–¥—ñ—Ç—å –≤–∞—à–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:\n"
		nextButton = "–î–∞–ª—ñ!"
	case "RU":
		confirmationMessage = "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –≤–∞—à –∑–∞–∫–∞–∑:\n"
		nextButton = "–î–∞–ª–µ–µ!"
	}

	// –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –¥–µ—Ç–∞–ª—è–º–∏ –∑–∞–∫–∞–∑–∞
	confirmationMessage += "üïí –í—Ä–µ–º—è: " + order["time"] + "\n"
	confirmationMessage += "üíê –ë—É–∫–µ—Ç: " + order["bouquet"] + "\n"
	confirmationMessage += "üì¶ –£–ø–∞–∫–æ–≤–∫–∞: " + order["packaging"] + "\n"
	confirmationMessage += "üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: " + order["quantity"] + "\n"

	// –ö–Ω–æ–ø–∫–∞ "–î–∞–ª–µ–µ"
	buttons := tgbotapi.NewReplyKeyboard(
		tgbotapi.NewKeyboardButtonRow(
			tgbotapi.NewKeyboardButton(nextButton),
		),
	)

	// –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
	msg := tgbotapi.NewMessage(chatID, confirmationMessage)
	msg.ReplyMarkup = buttons
	bot.Send(msg)
}
func sendPaymentMethodQuestion(bot *tgbotapi.BotAPI, chatID int64, lang string) {
	var message, prepaidButton, nonPrepaidButton string
	switch lang {
	case "DEU":
		message = "M√∂chten Sie den Strau√ü mit Vorauszahlung oder ohne Vorauszahlung kaufen?"
		prepaidButton = "Mit Vorauszahlung"
		nonPrepaidButton = "Ohne Vorauszahlung"
	case "EN":
		message = "Would you like to buy the bouquet with prepayment or without prepayment?"
		prepaidButton = "With prepayment"
		nonPrepaidButton = "Without prepayment"
	case "UK":
		message = "–•–æ—á–µ—Ç–µ –∫—É–ø–∏—Ç–∏ –±—É–∫–µ—Ç –∑ –ø–µ—Ä–µ–¥–æ–ø–ª–∞—Ç–æ—é —á–∏ –±–µ–∑ –ø–µ—Ä–µ–¥–æ–ø–ª–∞—Ç–∏?"
		prepaidButton = "–ó –ø–µ—Ä–µ–¥–æ–ø–ª–∞—Ç–æ—é"
		nonPrepaidButton = "–ë–µ–∑ –ø–µ—Ä–µ–¥–æ–ø–ª–∞—Ç–∏"
	case "RU":
		message = "–•–æ—Ç–∏—Ç–µ –∫—É–ø–∏—Ç—å –±—É–∫–µ—Ç —Å –ø—Ä–µ–¥–æ–ø–ª–∞—Ç–æ–π –∏–ª–∏ –±–µ–∑ –ø—Ä–µ–¥–æ–ø–ª–∞—Ç—ã?"
		prepaidButton = "–° –ø—Ä–µ–¥–æ–ø–ª–∞—Ç–æ–π"
		nonPrepaidButton = "–ë–µ–∑ –ø—Ä–µ–¥–æ–ø–ª–∞—Ç—ã"
	}

	buttons := tgbotapi.NewReplyKeyboard(
		tgbotapi.NewKeyboardButtonRow(
			tgbotapi.NewKeyboardButton(prepaidButton),
			tgbotapi.NewKeyboardButton(nonPrepaidButton),
		),
	)

	msg := tgbotapi.NewMessage(chatID, message)
	msg.ReplyMarkup = buttons
	bot.Send(msg)
}

func getApproximateDateTime(orderTime string) string {
	parsedTime, err := time.Parse("2006-01-02 15:04", orderTime)
	if err != nil {
		return orderTime // –ï—Å–ª–∏ –æ—à–∏–±–∫–∞, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ –≤—Ä–µ–º—è
	}
	approxTime := parsedTime.Add(3 * time.Minute) // –î–æ–±–∞–≤–ª—è–µ–º 3 –º–∏–Ω—É—Ç—ã
	return approxTime.Format("2006-01-02 15:04")  // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD HH:MM
}

func sendPrepaymentDetails(bot *tgbotapi.BotAPI, chatID int64, lang string) {
	var message string
	switch lang {
	case "DEU":
		message = "Sie k√∂nnen die Bestellung mit diesen Angaben bezahlen: AT 1234567890. Bei Vorauszahlung wird Ihr Strau√ü p√ºnktlich fertig!"
	case "EN":
		message = "You can pay for the order using these details: AT 1234567890. With prepayment, your bouquet will be ready on time!"
	case "UK":
		message = "–í–∏ –º–æ–∂–µ—Ç–µ –æ–ø–ª–∞—Ç–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –∑–∞ —Ü–∏–º–∏ —Ä–µ–∫–≤—ñ–∑–∏—Ç–∞–º–∏: AT 1234567890. –ü—Ä–∏ –≤–Ω–µ—Å–µ–Ω–Ω—ñ –ø–µ—Ä–µ–¥–æ–ø–ª–∞—Ç–∏ –≤–∞—à –±—É–∫–µ—Ç –±—É–¥–µ –≥–æ—Ç–æ–≤–∏–π –≤—á–∞—Å–Ω–æ!"
	case "RU":
		message = "–í—ã –º–æ–∂–µ—Ç–µ –æ–ø–ª–∞—Ç–∏—Ç—å –∑–∞–∫–∞–∑ –ø–æ —ç—Ç–∏–º —Ä–µ–∫–≤–∏–∑–∏—Ç–∞–º: AT 1234567890. –ü—Ä–∏ –≤–Ω–µ—Å–µ–Ω–∏–∏ –ø—Ä–µ–¥–æ–ø–ª–∞—Ç—ã –≤–∞—à –±—É–∫–µ—Ç –±—É–¥–µ—Ç –≥–æ—Ç–æ–≤ —Ç–æ—á–Ω–æ –≤ —Å—Ä–æ–∫!"
	}
	bot.Send(tgbotapi.NewMessage(chatID, message))
}

func sendNoPrepaymentDetails(bot *tgbotapi.BotAPI, chatID int64, lang string, userData map[int64]map[string]string) {
	approxDateTime := getApproximateDateTime(userData[chatID]["time"])
	var message string
	switch lang {
	case "DEU":
		message = "Die endg√ºltige Komposition des Strau√ües dauert noch einige Minuten nach der Zahlung in unserem Gesch√§ft. Vielen Dank f√ºr Ihre Bestellung!\n"
		message += "‚è≥ Ungef√§hre Fertigstellungszeit nach der Zahlung: " + approxDateTime
	case "EN":
		message = "The final bouquet arrangement will take a few more minutes after payment in our store. Thank you for your order!\n"
		message += "‚è≥ Approximate order readiness time after payment: " + approxDateTime
	case "UK":
		message = "–û—Å—Ç–∞—Ç–æ—á–Ω–µ —Å–∫–ª–∞–¥–∞–Ω–Ω—è –±—É–∫–µ—Ç–∞ –∑–∞–π–º–µ —â–µ –∫—ñ–ª—å–∫–∞ —Ö–≤–∏–ª–∏–Ω –ø—ñ—Å–ª—è –æ–ø–ª–∞—Ç–∏ –≤ –Ω–∞—à–æ–º—É –º–∞–≥–∞–∑–∏–Ω—ñ. –î—è–∫—É—î–º–æ –∑–∞ –≤–∞—à–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è!\n"
		message += "‚è≥ –ü—Ä–∏–±–ª–∏–∑–Ω–∏–π —á–∞—Å –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –ø—ñ—Å–ª—è –æ–ø–ª–∞—Ç–∏: " + approxDateTime
	case "RU":
		message = "–§–∏–Ω–∞–ª—å–Ω–∞—è –∫–æ–º–ø–æ–Ω–æ–≤–∫–∞ –±—É–∫–µ—Ç–∞ –∑–∞–π–º–µ—Ç –µ—â–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –≤ –Ω–∞—à–µ–º –º–∞–≥–∞–∑–∏–Ω–µ. –ë–ª–∞–≥–æ–¥–∞—Ä–∏–º –≤–∞—Å –∑–∞ —Å–¥–µ–ª–∞–Ω–Ω—ã–π –∑–∞–∫–∞–∑!\n"
		message += "‚è≥ –ü—Ä–∏–º–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∑–∞–∫–∞–∑–∞ –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã: " + approxDateTime
	}
	bot.Send(tgbotapi.NewMessage(chatID, message))
}

func sendThankYouMessage(bot *tgbotapi.BotAPI, chatID int64, lang string) {
	var message string
	switch lang {
	case "DEU":
		message = "Vielen Dank, dass Sie uns gew√§hlt haben, Ihre Bestellung wird bereits bearbeitet! ‚ò∫Ô∏è Verwenden Sie @florgalerie_bot ü§ñ f√ºr eine erneute Bestellung!"
	case "EN":
		message = "Thank you for choosing us, your order is already in progress! ‚ò∫Ô∏è Use @florgalerie_bot ü§ñ to reorder!"
	case "UK":
		message = "–î—è–∫—É—î–º–æ, —â–æ –í–∏ –æ–±—Ä–∞–ª–∏ –Ω–∞—Å, –í–∞—à–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –≤–∂–µ –≤ –ø—Ä–æ—Ü–µ—Å—ñ –ø—Ä–∏–≥–æ—Ç—É–≤–∞–Ω–Ω—è! ‚ò∫Ô∏è –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ @florgalerie_bot ü§ñ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è!"
	case "RU":
		message = "–ë–ª–∞–≥–æ–¥–∞—Ä–∏–º, —á—Ç–æ –í—ã –≤—ã–±—Ä–∞–ª–∏ –Ω–∞—Å, –í–∞—à –∑–∞–∫–∞–∑ —É–∂–µ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è! ‚ò∫Ô∏è –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ @florgalerie_bot ü§ñ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞!"
	}
	bot.Send(tgbotapi.NewMessage(chatID, message))
}

func sendOrderDetailsToAdmin(bot *tgbotapi.BotAPI, adminChatID int64, userChatID int64, userData map[int64]map[string]string) {
	order, exists := userData[userChatID]
	if !exists {
		log.Printf("No order data found for user: %d", userChatID)
		return
	}

	// –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∑–∞–∫–∞–∑–µ
	message := "–ù–æ–≤—ã–π –∑–∞–∫–∞–∑ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:\n"
	message += "üìû Chat ID: " + strconv.FormatInt(userChatID, 10) + "\n"
	message += "üíê –ë—É–∫–µ—Ç: " + order["bouquet"] + "\n"
	message += "üì¶ –£–ø–∞–∫–æ–≤–∫–∞: " + order["packaging"] + "\n"
	message += "üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: " + order["quantity"] + "\n"
	message += "‚è≥ –í—Ä–µ–º—è: " + order["time"] + "\n"

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
	msg := tgbotapi.NewMessage(adminChatID, message)
	_, err := bot.Send(msg)
	if err != nil {
		log.Printf("Failed to send order details to admin: %v", err)
	}
}

func main() {
	bot, err := tgbotapi.NewBotAPI("TOKEN")
	if err != nil {
		log.Panic(err)
	}

	bot.Debug = true
	log.Printf("Authorized on account %s", bot.Self.UserName)

	u := tgbotapi.NewUpdate(0)
	u.Timeout = 60

	updates := bot.GetUpdatesChan(u)

	userLanguage := make(map[int64]string)
	userState := make(map[int64]string)
	userData := make(map[int64]map[string]string)

	for update := range updates {
		if update.Message != nil {
			chatID := update.Message.Chat.ID

			// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤–ª–æ–∂–µ–Ω–Ω–æ–π –∫–∞—Ä—Ç—ã –¥–ª—è userData
			if userData[chatID] == nil {
				userData[chatID] = make(map[string]string)
			}

			switch update.Message.Text {
			case "/start":
				buttons := tgbotapi.NewReplyKeyboard(
					tgbotapi.NewKeyboardButtonRow(
						tgbotapi.NewKeyboardButton("DEU"),
						tgbotapi.NewKeyboardButton("EN"),
					),
					tgbotapi.NewKeyboardButtonRow(
						tgbotapi.NewKeyboardButton("UK"),
						tgbotapi.NewKeyboardButton("RU"),
					),
				)
				msg := tgbotapi.NewMessage(chatID, "Select a language:")
				msg.ReplyMarkup = buttons
				bot.Send(msg)
			case "DEU", "EN", "UK", "RU":
				userLanguage[chatID] = update.Message.Text
				sendGreeting(bot, chatID, update.Message.Text)
			case "Next!", "Weiter!", "–î–∞–ª—ñ!", "–î–∞–ª–µ–µ!":
				if userState[chatID] == "confirming_order" {
					userState[chatID] = "choosing_payment"
					sendPaymentMethodQuestion(bot, chatID, userLanguage[chatID])
				} else {
					sendQuestion(bot, chatID, userLanguage[chatID])
				}
			case "Choose!", "Ausw√§hlen!", "–í–∏–±—Ä–∞—Ç–∏!", "–í—ã–±—Ä–∞—Ç—å!":
				userState[chatID] = "choosing_bouquet"
				sendBouquetChoiceMessage(bot, chatID, userLanguage[chatID])

				removeKeyboard := tgbotapi.NewRemoveKeyboard(true)
				msg := tgbotapi.NewMessage(chatID, "")
				msg.ReplyMarkup = removeKeyboard
				bot.Send(msg)
			case "Create my own!", "Mein eigener Strau√ü!", "–°—Ç–≤–æ—Ä–∏—Ç–∏ —Å–≤—ñ–π!", "–°–æ–∑–¥–∞—Ç—å —Å–≤–æ–π!":
				userState[chatID] = "creating_bouquet"
				sendCustomBouquetMessage(bot, chatID, userLanguage[chatID])

				// –£–¥–∞–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞
				removeKeyboard := tgbotapi.NewRemoveKeyboard(true)
				msg := tgbotapi.NewMessage(chatID, " ") 
				msg.ReplyMarkup = removeKeyboard
				bot.Send(msg)

			case "Just one", "Nur einen", "–¢—ñ–ª—å–∫–∏ –æ–¥–∏–Ω", "–¢–æ–ª—å–∫–æ –æ–¥–∏–Ω":
				userState[chatID] = "choosing_packaging"
				userData[chatID]["quantity"] = "1"
				msg := tgbotapi.NewMessage(chatID, " ")
				msg.ReplyMarkup = tgbotapi.NewRemoveKeyboard(true)
				bot.Send(msg)
				sendPackagingQuestion(bot, chatID, userLanguage[chatID])
			case "Multiple bouquets", "Mehrere Str√§u√üe", "–ö—ñ–ª—å–∫–∞ –±—É–∫–µ—Ç—ñ–≤", "–ù–µ—Å–∫–æ–ª—å–∫–æ –±—É–∫–µ—Ç–æ–≤":
				userState[chatID] = "choosing_packaging"
				userData[chatID]["quantity"] = "multiple"
				msg := tgbotapi.NewMessage(chatID, "–î–æ–ø–∏–ª–∏—Ç—å —Å–ª—É—á–∞–π –¥–ª—è –≤—ã–±–æ—Ä–∞ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö.")
				bot.Send(msg)
				sendPackagingQuestion(bot, chatID, userLanguage[chatID])
			case "Kraftpapier", "Bunte Verpackung", "Ohne Verpackung", "Craft paper", "Colored wrap", "No packaging",
				"–ö—Ä–∞—Ñ—Ç–æ–≤–∏–π –ø–∞–ø—ñ—Ä", "–ö–æ–ª—å–æ—Ä–æ–≤–∞ —É–ø–∞–∫–æ–≤–∫–∞", "–£–ø–∞–∫–æ–≤–∫–∞ –Ω–µ –ø–æ—Ç—Äi–±–Ω–∞", "–ö—Ä–∞—Ñ—Ç–æ–≤–∞—è –±—É–º–∞–≥–∞", "–¶–≤–µ—Ç–Ω–∞—è —É–ø–∞–∫–æ–≤–∫–∞", "–ë–µ–∑ —É–ø–∞–∫–æ–≤–∫–∏":
				userState[chatID] = "waiting_for_time"
				userData[chatID]["packaging"] = update.Message.Text

				removeKeyboard := tgbotapi.NewRemoveKeyboard(true)
				msg := tgbotapi.NewMessage(chatID, " "+update.Message.Text)
				msg.ReplyMarkup = removeKeyboard
				bot.Send(msg)

				sendOrderTimeRequest(bot, chatID, userLanguage[chatID])
			default:
				switch userState[chatID] {
				case "choosing_bouquet":
					matched, _ := regexp.MatchString(`^#\d+$`, update.Message.Text)
					if matched {
						userData[chatID]["bouquet"] = update.Message.Text
						sendBouquetSavedMessage(bot, chatID, userLanguage[chatID], update.Message.Text)
						sendSingleOrMultipleQuestion(bot, chatID, userLanguage[chatID])
						userState[chatID] = "choosing_single_or_multiple"
					} else {
						bot.Send(tgbotapi.NewMessage(chatID, "Please enter a valid bouquet number (e.g., #123)."))
					}
				case "creating_bouquet":
					userData[chatID]["bouquet"] = update.Message.Text
					sendBouquetSavedMessage(bot, chatID, userLanguage[chatID], update.Message.Text)
					sendSingleOrMultipleQuestion(bot, chatID, userLanguage[chatID])
					userState[chatID] = "choosing_single_or_multiple"
				case "waiting_for_time":
					handleOrderTime(bot, chatID, update.Message.Text, userLanguage[chatID], userData)
					userData[chatID]["time"] = update.Message.Text
					sendOrderConfirmation(bot, chatID, userLanguage[chatID], userData)
					userState[chatID] = "confirming_order"
				case "Return to time selection", "Zur√ºck zur Zeitauswahl", "–ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –¥–æ –≤–∏–±–æ—Ä—É —á–∞—Å—É", "–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –≤—ã–±–æ—Ä—É –≤—Ä–µ–º–µ–Ω–∏":
					userState[chatID] = "waiting_for_time"
					sendOrderTimeRequest(bot, chatID, userLanguage[chatID])
				case "Get as soon as possible tomorrow", "M√∂glichst fr√ºh morgen abholen", "–ó–∞–±—Ä–∞—Ç–∏ —è–∫–Ω–∞–π—à–≤–∏–¥—à–µ –∑–∞–≤—Ç—Ä–∞", "–ü–æ–ª—É—á–∏—Ç—å –∫–∞–∫ –º–æ–∂–Ω–æ —Å–∫–æ—Ä–µ–µ –∑–∞–≤—Ç—Ä–∞":
					nextDay := time.Now().Add(24 * time.Hour).Format("2006-01-02 08:00")
					userData[chatID]["time"] = nextDay
					sendOrderTimeSavedMessage(bot, chatID, userLanguage[chatID])

				case "choosing_payment":
					switch update.Message.Text {
					case "–° –ø—Ä–µ–¥–æ–ø–ª–∞—Ç–æ–π", "Mit Vorauszahlung", "–ó –ø–µ—Ä–µ–¥–æ–ø–ª–∞—Ç–æ—é", "With prepayment":
						sendPrepaymentDetails(bot, chatID, userLanguage[chatID])
						sendThankYouMessage(bot, chatID, userLanguage[chatID])
						/*adminChatID := int64(9999999) // Chat ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
						sendOrderDetailsToAdmin(bot, adminChatID, chatID, userData)*/
						// –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ –Ω–∞—á–∞–ª—É —Å –∫–Ω–æ–ø–∫–æ–π /start
						startButton := tgbotapi.NewReplyKeyboard(
							tgbotapi.NewKeyboardButtonRow(
								tgbotapi.NewKeyboardButton("/start"),
							),
						)
						msg := tgbotapi.NewMessage(chatID, " ")
						msg.ReplyMarkup = startButton
						bot.Send(msg)
					/*case "–ë–µ–∑ –ø—Ä–µ–¥–æ–ø–ª–∞—Ç—ã", "Ohne Vorauszahlung", "–ë–µ–∑ –ø–µ—Ä–µ–¥–æ–ø–ª–∞—Ç–∏", "Without prepayment":
						sendNoPrepaymentDetails(bot, chatID, userLanguage[chatID], userData)
						sendThankYouMessage(bot, chatID, userLanguage[chatID])
						adminChatID := int64(999999999) // Chat ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
						sendOrderDetailsToAdmin(bot, adminChatID, chatID, userData)
						// –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ –Ω–∞—á–∞–ª—É —Å –∫–Ω–æ–ø–∫–æ–π /start
						startButton := tgbotapi.NewReplyKeyboard(
							tgbotapi.NewKeyboardButtonRow(
								tgbotapi.NewKeyboardButton("/start"),
							),
						)
						msg := tgbotapi.NewMessage(chatID, " ")
						msg.ReplyMarkup = startButton
						bot.Send(msg)*/
					}
				default:
					bot.Send(tgbotapi.NewMessage(chatID, "Please select a valid option."))
				}
			}
		}
	}
}
